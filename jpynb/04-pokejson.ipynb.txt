{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Pokémon JSON Setup\n",
    "--------------------------\n",
    "\n",
    "Run your python code to crawl the Pokémon web site but pull down all 807 Pokémon into the __pokeapi__ table in your personal PostgreSQL server.  Then work through this notebook to read data from your personal PostgreSQL server.  Here is some sample JSON that comes back from the API: https://pokeapi.co/api/v2/pokemon/42 - you can look at this JSON to figure out the schema of the JSON.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# https://www.pg4e.com/code/ipynb/04-pokejson.ipynb\n",
    "\n",
    "import psycopg2\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PostgreSQL connection data taken from hidden.py\n"
     ]
    }
   ],
   "source": [
    "sql_string = None\n",
    "# sql_string = 'dbname=readonly user=readonly password=secret_xyzzy host=pg.pg4e.com port=5432'\n",
    "    \n",
    "# If we leave sql_string as None, we can use hidden.py - but this only works for demo/test - not autograder\n",
    "if sql_string is None:\n",
    "    raise Exception('You need to define your sql_string')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Make the connection and cursor\n",
    "conn = psycopg2.connect(sql_string, connect_timeout=3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-e8404713c17da021",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "sql = \"SELECT count(*) FROM pokeapi;\"\n",
    "df = pd.read_sql_query(sql, conn)\n",
    "assert df['count'][0] == 807"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>807</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   count\n",
       "0    807"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>weight</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>bulbasaur</td>\n",
       "      <td>69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ivysaur</td>\n",
       "      <td>130</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>venusaur</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>charmander</td>\n",
       "      <td>85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>charmeleon</td>\n",
       "      <td>190</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         name  weight\n",
       "0   bulbasaur      69\n",
       "1     ivysaur     130\n",
       "2    venusaur    1000\n",
       "3  charmander      85\n",
       "4  charmeleon     190"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sql = \"SELECT body->>'name' AS name, (body->'weight')::int AS weight FROM pokeapi LIMIT 10;\"\n",
    "df = pd.read_sql_query(sql, conn)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fe11ecb94a8>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['weight'].plot(kind='bar')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fe11c8a1d30>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# https://stackoverflow.com/questions/38683709/python-pandas-how-to-set-dataframe-column-value-as-x-axis-labels\n",
    "df.set_index('name').plot.bar(rot=0, title='weight', figsize=(15,10), fontsize=12)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>height</th>\n",
       "      <th>weight</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7</td>\n",
       "      <td>69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10</td>\n",
       "      <td>130</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>20</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6</td>\n",
       "      <td>85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>11</td>\n",
       "      <td>190</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   height  weight\n",
       "0       7      69\n",
       "1      10     130\n",
       "2      20    1000\n",
       "3       6      85\n",
       "4      11     190"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sql = \"SELECT (body->>'height')::int AS height, (body->'weight')::int AS weight FROM pokeapi LIMIT 10;\"\n",
    "df = pd.read_sql_query(sql, conn)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fe11c844be0>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.plot.scatter.html\n",
    "\n",
    "df.plot.scatter(x='height', y='weight')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-4aae0db1592bddba",
     "locked": false,
     "schema_version": 3,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "# Write a query to return four columns\n",
    "# id - The id of the pokemon\n",
    "# exp - The base_experience value from the json body converted to an integer\n",
    "# height - The height value from the json body converted to an integer\n",
    "# weight - The weight value from the json body converted to an integer\n",
    "# Return all the rows of data (i.e. no limit)\n",
    "# Sort the returned rows by the id of the pokemon\n",
    "\n",
    "### BEGIN SOLUTION\n",
    "sql = None\n",
    "### END SOLUTION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>exp</th>\n",
       "      <th>height</th>\n",
       "      <th>weight</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>64</td>\n",
       "      <td>7</td>\n",
       "      <td>69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>142</td>\n",
       "      <td>10</td>\n",
       "      <td>130</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>236</td>\n",
       "      <td>20</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>62</td>\n",
       "      <td>6</td>\n",
       "      <td>85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>142</td>\n",
       "      <td>11</td>\n",
       "      <td>190</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   exp  height  weight\n",
       "0   64       7      69\n",
       "1  142      10     130\n",
       "2  236      20    1000\n",
       "3   62       6      85\n",
       "4  142      11     190"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_sql_query(sql, conn)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-afcf7d2883c53790",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "assert df['exp'].count() == 807\n",
    "\n",
    "assert df['exp'][0] == 64\n",
    "assert df['height'][0] == 7\n",
    "assert df['weight'][0] == 69\n",
    "\n",
    "### BEGIN HIDDEN TESTS\n",
    "assert df['exp'][4] == 142\n",
    "assert df['height'][4] == 11\n",
    "assert df['weight'][4] == 190\n",
    "### END HIDDEN TESTS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fe11c8019b0>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZIAAADsCAYAAABe3SD/AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAAgAElEQVR4nOzdeXxcdbn48c9zZsvSpFu6Jt3pBoWyFChL2TcVBQWhKAKKVgFFvRev4HqViz9ExQUQLxdQQFarCKjsslMoZSu0paV0TZu2aZtmn+Wc8/z+OJM2adJ20sxkkvR5+zpm5sycc74nHebJd3u+oqoYY4wxe8vJdwGMMcb0bhZIjDHGdIkFEmOMMV1igcQYY0yXWCAxxhjTJRZIjDHGdIkFEmOM6SVEZICIzBWRD0RkiYgcJSKDRORpEfkw/XNgq/dfIyLLRWSpiJyes3Lta/NIysrKdOzYsfkuhjGmF3jzzTc3q+qQrpzj9BOLdctWL7PrLUw8qapn7Op1EbkLeElVbxeRKFAEfA/YqqrXi8jVwEBV/a6I7A/cDxwBjASeASapamaF6YRwtk/Y040dO5YFCxbkuxjGmF5ARFZ39Rybt3q8/mRFRu+NjPiobDdlKQWOAy4BUNUkkBSRs4AT0m+7C3ge+C5wFvCAqiaAlSKynCCozNub+9gda9oyxpicUjz1M9r2YDxQDfxRRN4WkdtFpBgYpqpVAOmfQ9PvLwfWtjq+Mr0v6yyQGGNMDingoxltQJmILGi1zWl1qjBwKHCrqh4CNAJX7+bSsoviZN0+17RljDHdzWePtY0Wm1V1xi5eqwQqVfX19PO5BIFko4iMUNUqERkBbGr1/lGtjq8A1neu5JmxGokxxuSQoqTUz2jb7XlUNwBrRWRyetfJwGLgUeDi9L6LgUfSjx8FZotITETGAROB+dm+P8hhIBGRO0Vkk4i832pfp4epichhIvJe+rXfiYik98dE5MH0/tdFZGyu7sUYY/aWAh6a0ZaBbwD3ishC4GDgZ8D1wKki8iFwavo5qroIeIgg2DwBXJGLEVuQ26atPwE3A3e32nc18GyrYWpXAy3D1GYDB5AepiYiLcPUbgXmAK8B/wLOAB4HLgVqVHU/EZkN/Bw4P1uFf/H5JfzmV0/Q1JTgwING88OffJrS0sJsnd4YAO564U1ueXoerutz6kETufa8U4mGrcW5r/Gz1DWhqu8AHTV9nbyL918HXJeVi+9GzmokqvoisHWn3WcRDE8j/fPsVvsfUNWEqq4ElgNHpNv7SlV1ngYTXu7e6ZiWc80FTm6prXTVh8s28POfPUZdXTOu6/PewjVc++OHs3FqY7Z79v3l3PTkqzQlUiQ9j2feX84Nj76Y72KZLFPAU81o6626u4+ks8PUytOPd97f5hhVdYFaYHA2CvnuO2vw/R3/qK7rs3Dhmmyc2pjtnl+8gnjK3f48kXJ54YMVeSyRyRU/w6236imd7bsapra74WsZD20TkTktw+mqq6v3WJjS0kJCoba/mqKi6B6PM6YzykqKCe/0ORtYZM2nfY1m2D+SYR9Jj9TdgWRjurmKDIepVaYf77y/zTEiEgb6074pDQBVvU1VZ6jqjCFD9pzt4ISTplJeMYiCggjhSIhYLMy3/uNjmd6jMRm56LhDGVRcSEEkTDQcojAa5vufPinfxTJZpgqpDLfeqrt79VqGqV1P+2Fq94nIjQSd7ROB+arqiUi9iMwEXgcuAm7a6VzzgHOBf2uWEodFo2FuuvVinv/3Yupqm5l+yBgmThqejVMbs93A4kL+ftVFPPnuMuIpl+Onjmd02YB8F8tkneB12IDSd+QskIjI/QT5X8pEpBL4MUEAeUhELgXWAJ+FYJiaiLQMU3NpO0ztMoIRYIUEo7UeT++/A7gnnT9mK8Gor6yJRsOcdsZB2TylMe2UFhbw2Zn2OevLFPB7cW0jEzkLJKp6wS5e6tQwNVVdAEzrYH+cdCAyxpiezGokxhhj9lowIdECienDVJUtTU30i8YoiNjHwZhsUyClPWWAbG7YN8c+bH1dHRfeP5eN9Q14qnx71tF8debh+S6WMX2KIng9ZqZFbvTtuzO7ddnfHqOyto6E5+H6Pje/8hqvr6nc84HGmE7xVTLaeisLJPuwpdWb8VuNmE75Pu9t2JjHEhnT97T0kWSy9VbWtLUPG1JcRFV9w/bn0VCIkaUleSyRMX2R4PXxPpK+fXdmt379qY9TFInQLxqlKBLhyNEVnDF5Yr6LZUyfEqyQ6GS09VZWI+nFXM9n/YZtFMQiDC3rfE1iRkU5T3/lEhZu2MjAwgIOKx9JlhIoG2PSVIWkhvJdjJyyQNJLVW+p5+vff4Ca2iZcz+ekYybzvW98DMfpXCAYVtKPU0v65aiUxhgAvxf3f2Si99al9nH/89vH2VBdR3M8RSrl8cK8ZTz1wuJ8F8sYs5Ogs93JaOutem/J93Efra5us2ZKPOGy9CMbcWVMzxN0tmey9VbWtNVLVYwYSF19nJaEx7FYmLGjsrKulzEmi1o62/uyvn13fdgPvvkxBpQWUlwUpSAW4eADRvGJUw7Md7GMMR3wVDLaeiurkfRSFSMG8sCtX2b5yk0UFkbZb+wQG3FlTA+kCCnt21+1ffvu+riiwigH7V+x5zf2cFsbmvjhQ0+xZN0mRpcN4NrzTmPUYFvgyfQNLZ3tfVnfvjvT4/m+8sU//IVXlq1mU10jb61cz4U3P0hjPJnvohmTFUpmzVq9uWnLAonJq/Xb6li3tQ7X8wHwVUm4LovW2Qg003fYzHZjcqggHMbbaR1S31dbG8X0Gar06qG9mejbd2d6vLLSYk6fPpHCdOAoiISZWj6UAyqG5blkxmRH0NkeymjrrezPPpN3Pzv/DP42/n3eW7OBCcMGccHRBxNy7G8c03f09c52CyQm7xxHOPfIAzn3SJsHY/oepXcvWpUJCyTGGJNjfb1G0rfvzhhj8kwBX52Mtj0RkVUi8p6IvCMiC9L7BonI0yLyYfrnwFbvv0ZElovIUhE5PVf3aIHEGGNyKrNldjux1O6Jqnqwqs5IP78aeFZVJwLPpp8jIvsDs4EDgDOA34tITnr0LZAYY0wOKeR61NZZwF3px3cBZ7fa/4CqJlR1JbAcOKIr97IrFkiMMSaHVCVrTVsEcekpEXlTROak9w1T1argWloFDE3vLwfWtjq2Mr0v66yz3RhjcqwTExLLWvo+0m5T1dtaPT9GVdeLyFDgaRH5YDfn6qitTDvY12UWSEyPsHBNFcuqNjNqcH+OmDDKMhmbPiNYjyTjz/PmVn0f7c+luj79c5OIPEzQVLVRREaoapWIjAA2pd9eCYxqdXgFsL6z5c+EBRKTd3c+9wa/f/o1AESETx46hR+dc0qeS2VMtkhWUqSISDHgqGp9+vFpwE+BR4GLgevTPx9JH/IocJ+I3AiMBCYC87tckA5YIDF5VdsU56YnXyWVTtoI8OibS7jgmIOZOLwsjyUzJjuC4b9ZqWEPAx5O19bDwH2q+oSIvAE8JCKXAmuAzwKo6iIReQhYDLjAFarqZaMgO7NAYvJqW2Mz4VCoTSAJhxw21zVaIDF9QkuurS6fR3UFML2D/VuAk3dxzHXAdV2++B7kZdSWiHxbRBaJyPsicr+IFOzNpBoROSw9OWe5iPxOrGG91xk5sHR7wsYWvq9MGjkkTyUyJvv6ehr5bi+5iJQDVwIzVHUaECKYNLM3k2puBeYQtP1NTL9uepFIOMQdXzuXkQNLEIEBRQX8/tKzGdyvKN9FMyYrgjTyfXthq3w1bYWBQhFJAUUEIwmuAU5Iv34X8DzwXVpNqgFWishy4AgRWQWUquo8ABG5m2AizuPddxsmGyYOL+Op732ZlOsRCffeVNrG7EpfT9rY7TUSVV0H/JKgU6gKqFXVp+j8pJry9OOd97cjInNEZIGILKiurs7m7ZgssiBi+qIg+2/WJiT2SPlo2hpIUMsYRzAkrVhELtzdIR3s093sb79T9TZVnaGqM4YMsbZ3Y0z3CVKkOBltvVU+mrZOAVaqajWAiPwNOJrOT6qpTD/eeb8xxvQg0qtrG5nIx92tAWaKSFF6lNXJwBJ2TKqB9pNqZotITETGkZ5Uk27+qheRmenzXNTqGGOM6TF8JKOtt+r2Gomqvi4ic4G3CCbJvA3cBvSj85NqLgP+BBQSdLJbR7sxpkdpGbXVl+Vl1Jaq/hj48U67E3RyUo2qLgCmZb2AxhiTRX29actmthtjTA7Zmu3G7IGq8sSyD5m/tpLy0lI+f8h0CiORfBfLmB5DAddqJMbs2q9fepU/vvkWzSmXWCjEw4uW8LcvXEAsbB8tY1r09aatvn13JqdSnsdt8xfQnHIBSHgea7fV8tLK1XkumTE9iAZNW5lsvZX92Wj2WsrzUW07B1SA5lQqPwUypgfq5MJWvZLVSMxeK4pGOKR8JJHQjo+RiHDk6IrdHGXMvqev10gskJgu+b9zzuLkCRMoKypi/6FDuPeCzzK0X798F8uYHqNlYau+HEisact0SUksxs1nn5nvYhjTYymC6/ftv9ktkBhjTI719T4SCyTGGJNL2vfXI7FAYowxOdTSR9KXWSAxxpgcs0BijDFmrymCZ53txhhjusI6243Jodp4nLfWracgHOHwUeWEnb79l5vZ96h1thuTOyu2bOW8ex/E9YNUK+MHD+L+C86jIGIfS9O3aB8PJPbnn8mba554mtp4nIZkksZUimWbN3PPW+/ku1jGZJklbTQmZ9bV1tE65WPC9VhVU5O38hiTK1YjMSZHpo8cTqRVn0hhOMxhFSPzWCJjsk8VPF8y2norCyQmb647/VQmDykjGgoRdhzOnjaVTx+wf76LZUzW+UhGW29lTVsmbwYUFvDwRZ9ja1Mz0XCIklgs30UyJuuU7DZtiUgIWACsU9UzRWQQ8CAwFlgFnKeqNen3XgNcCnjAlar6ZNYK0orVSExeiQiDi4ssiJg+LOud7d8ElrR6fjXwrKpOBJ5NP0dE9gdmAwcAZwC/TwehrLNAYowxOaaa2bYnIlIBfAK4vdXus4C70o/vAs5utf8BVU2o6kpgOXBEtu6pNQskxhiTY6qS0ZaB3wD/Bfit9g1T1argOloFDE3vLwfWtnpfZXpf1lkfiTHG5FAwaivjv9nLRGRBq+e3qeptACJyJrBJVd8UkRMyOFdHkSmDek/nWSAxxpgcy6TZKm2zqs7YxWvHAJ8SkY8DBUCpiPwZ2CgiI1S1SkRGAJvS768ERrU6vgJY3+nCZ8CatowxJsey0bSlqteoaoWqjiXoRP+3ql4IPApcnH7bxcAj6cePArNFJCYi44CJwPxc3J/VSIwxJoeUjPs/9tb1wEMicimwBvgsgKouEpGHgMWAC1yhql4uCmCBxBhjcizbHROq+jzwfPrxFuDkXbzvOuC6LF++HQskxhiTSwrai9OfZCIvfSQiMkBE5orIByKyRESOEpFBIvK0iHyY/jmw1fuvEZHlIrJURE5vtf8wEXkv/drvRKRv/2sZY3qlLA7/7ZHy1dn+W+AJVZ0CTCeYpbk3szNvBeYQdCJNTL9ujDE9SrYmJPZU3R5IRKQUOA64A0BVk6q6jU7OzkwPcytV1XmqqsDdrY4xxpgeoSXXltVIsms8UA38UUTeFpHbRaSYzs/OLE8/3nm/Mcb0HAqoZLb1UvkIJGHgUOBWVT0EaCTdjLULu5qdmfGsTRGZIyILRGRBdXV1Z8trjDFdYk1b2VcJVKrq6+nncwkCy8Z0cxUZzs6sTD/eeX87qnqbqs5Q1RlDhgzJ2o0YY8yeCepntvVW3R5IVHUDsFZEJqd3nUwwYaZTszPTzV/1IjIzPVrrolbHGGNMz6EZbr1UvuaRfAO4V0SiwArgiwRBrbOzMy8D/gQUAo+nN2OM6Tm076/ZnpdAoqrvAB0lJuvU7ExVXQBMy27pjDEmy3pxbSMTGTVticg3M9lnjDGmI5Lh1jtl2kdycQf7LsliOfZpKS8nedSMMT2Fn+HWS+22aUtELgA+B4wTkUdbvVQCbMllwfYFq7ds4/K7/86qLTWUxGL84vyPM2vS2HwXyxiTTS3zSPqwPfWRvApUAWXAr1rtrwcW5qpQ+wJV5dI751JVW48q1MUTfPO+x3jsmxdTPrA038UzxmRRb54jkondBhJVXQ2sBo7qnuLsO2qamtlc39TmAxZ2HBat22iBxJi+po8Hkkw72z+TzspbKyJ1IlIvInW5Llxf1i8WQ3f6dHm+MrhfUZ5KZIzJGUuRAsANwKdUtb+qlqpqiaran81dEA2H+N6ZJ1IQCVMQCVMUjXD85LEcOmZkvotmjMky0cy23irTeSQbVXVJTkuyDzr/iIOYVj6MRes2Mrx/CbMmjcWWVDGmj1GBXpz+JBN7GrX1mfTDBSLyIPB3INHyuqr+LYdl2yccUD6MA8qH5bsYxphc6gW1DREpAC4HjiUo8csEyXXjezp2TzWST7Z63ASc1uq5AhZIjDFmT3pBICFY06keuCn9/ALgHtLpqnZnT6O2vtjlopm9Fk+k2FbXTNnAYsLh0J4PMMb0TL0jkExW1emtnj8nIu9mcmBGfSQi8rsOdtcCC1TVMu7mwBPPL+KGPzyFOEJBNMyvfnguUyYMz3exjDGd1XsmJL4tIjNV9TUAETkSeCWTAzMdtVUAHAx8mN4OAgYBl4rIbzpfXrM7a9fX8Iv/fZpkyiORcKmtj/Of1/4Vz+vFORSM2Yf1klFbRwKvisgqEVkFzAOOF5H3RGS3E9AzHbW1H3CSqroAInIr8BRwKvDeXhfbdOij1dWEQm1jfHM8yba6ZgYPLM5TqYwxey3/QSITZ+ztgZkGknKgmKA5i/TjkarqiUhi14eZvTF8aGm72oeI0L+kIE8lMsZ0RQ+obWRioqo+03qHiFysqnft6cDOTEh8R0T+KCJ/At4GfikixcAzuz3SdNqUCcP59BkHE4uGKS6KEouG+eGVH7cOd2N6q94xs/1HInKriBSLyDAReYy2I3d3KaMaiareISL/Ao4gSJr/PVVtWR/9O3tVZLNbX7/4BE4/fn82Vtez35gyhg/tn+8iGWP2Ru9ZRvd44D+Bd9LPf6Sq92dy4J4mJE5R1Q9E5ND0rrXpn8NFZLiqvrVXxTUZmTh2KBPHDs13MYwxXdU7AslAgg73j4AKYIyIiOqecxfvqUbyH8Ac2qaQb6HASZ0sqDHG7HOkdwy4fA24XlXvFJFC4OcEw3+P3tOBe5qQOCf988RslNJ0nu8rKys347o+40eXEbF+EmN6nyzUSNIpTF4EYgTf3XNV9cciMgh4EBgLrALOU9Wa9DHXAJcCHnClqj65m0ucQjDc90eq+lMR+WX6nHuU6YTEIoLayWhVnSMiEwlmQf4jk+PN3kkkXb593Vw+WLkJESgbUMwfrr2AgaWWat6Y3iKLc0QSBNMwGkQkArwsIo8DnwGeVdXrReRq4GrguyKyPzAbOAAYCTwjIpNUdVdre19DsODvScBPCdKl/Ao4fE8Fy3TU1h+BJDuqOJXA/2R4rNlL9z46nyUfbSSeSNEcT1FVXccv73g238UyxnRWFkZtaaAh/TSS3hQ4C2gZonsXcHb68VnAA6qaUNWVwHKCAVO7cqSqXgHE09erAaKZ3F6mgWSCqt4ApNIXaCYYvWVy6MNV1SRS7vbnrufz0erqPJbIGLNXNMNtD0QkJCLvAJuAp1X1dWCYqlYBpH+2jNApZ8cAKQgqAOW7OX1KREItJRGRIQQ1lD3KNJAk050vLReYQKt08iY3Jo8fRiy6o/UxHHJsFJcxvVAnUqSUiciCVtuc1udRVU9VDyYYVXWEiEzb3WU72Le7cPU74GFgqIhcR5BG/meZ3F+mM9t/DDwBjBKRe4FjgEsyPNbspc9/6nDeXLSW95etx3GEYYNLuOrSk/NdLGNMZ2inRm1tVtUZezyl6jYReZ4grclGERmhqlUiMoKgtgJBDWRUq8MqgPXsgqreKyJvAicTBKGzM13QMNNAchHwT2AusAL4pqpuzvBYk4HF6zayuaGJqSOGMKS0HwCRcIjf/eBc1lbVkHJ9xpQPIhzKtBJpjOkxsjNqawiQSgeRQoJRVj8HHgUuBq5P/2zJyP4ocJ+I3EjQ2T4RmL/bYqp+AHzQ2bJlGkj+SLBq1qnAeIJ0KS+q6m87e0HTlqryw4ef5vGFSwk5Dp6v3PKFTzFzwmggyLE1euSgPJfSGNMl2Rm1NQK4K92P4QAPqeo/RGQe8JCIXAqsIb0QlaouEpGHgMWAC1yxmxFbXZJpipR/i8gLBMPATgS+RjCkzAJJF837aA2PL1xGc6tO9f944J+8+v3Lur0sKc9jQeU6mlMuh1WMpH+BJYk0JhuyMfxXVRcCh3SwfwtBc1RHx1wHXNf1q+9epvNIniXI+DsPeAk4XFU37f4ok4l1NXXs/OdKbVOclOcRCXXf5MN4ymX2fQ+ycksNIkLYcfjLF2YzbtDAbiuDMaZ3yrTBfSHBPJJpBItaTUu30ZkumjJiSLta78iBpd0aRADuevNtPqzeQmMqRUMySW08zjWPP9WtZTCmz8rS8N+eKqNAoqrfVtXjgE8DWwj6TLblsmD7igMrhvOtU48mEnIoiIQp61fErRedvecDs2zl1hoS3o7mUwUqa+u6vRzG9DnpUVuZbL1Vpk1bXwdmAYcBq4E7CZq49lq6w2gBsE5Vz9ybfDEichjwJ6AQ+BfBaLJeF9cvOuYwzplxINuamhlWWpKXkVmHjyrnnx8s3d5XE3EcDh4xotvLsa9JJF3eeHcViaTLodNGMbC/rYDZJ/W6b6XOyXTUViFwI/Bmy3K7WfBNYAlQmn5+NZ3PF3MrQXbi1wgCyRnA41kqX7cqjkUpjmWUjSAnPjNtf95ZX8VfFi7CEWHykDKu+9gpeSvPvqCpOclXrv4zmzbXA+A4DrdedwHjR5fluWR9S119Mz/6xWO8u6SS4sIY/3XFaRx35MRuu77Qa1ZI3GuZNm39QlVfz1YQEZEK4BPA7a12dypfTHriTamqzkvXQu5udYzpJBHh2tNP4Y0rv8ZLl32Zv110gY3ayrEH//Em6zfU0hwPcqk1NSe44Q/WL5VtP7jhUd5dUonr+tTWN/PTG//J8lXdnGrI+khy4jfAf9E2j0tn88WUpx/vvL8dEZnTknKgutpyVe1OSSzG4OIiRCyVWq6t37iNlNuqX0qhekt9HkvU96gq7y4Ogkjrfe+8v3Y3R2W7EJ1KkdIrdXsgEZEzgU2q+mamh3SwT3ezv/1O1dtUdYaqzhgyZEiGlzUmtw6bNpqC2I7W5UgkxPT9K/JYor5HRCgqbNtk7IQcSku6ubbtZ7j1UvmokRwDfEpEVgEPACeJyJ9J54sByDBfTGX68c77jekVTj9+f84+7WBCjhByhAMnj+SqOafmu1h9zn9+9RRi0TDhsENBLMLokQM58ejJ3VqGvl4jybSzPWtU9RqCBVQQkROAq1T1QhH5BZ3IF6OqnojUi8hM4HWCfGA3devNGNMFIsLXLzmBr35+Fq7nUViQv8EWfdkps6ZSMWIg7yyqZEBpIScdO5lIpJtXGu3FQSIT3R5IduN6Op8v5jJ2DP99nF46Ysvs2yKRUPd/se1jpuw3nCn7Dc/PxXt5R3om8hpIVPV54Pn0407ni1HVBQSz7fusbY3NPPX2MlzP5/hp4ykf3D/fRTLGdFJvbrbKRE+qkZidVNc2cN7P/0xjIoWqctM/XuFP3zqfyeU2YMCYXqWPBxJb3KIHu/2p+dQ2xUmkXJKuR1Mixc/nPpfvYrVRF49z+cOPceRNf+DMP97D+xs25rtIxvQ4fT1FigWSHmxzXROe3/ZPma0NzRkd++LKVdzy6uv8fdESPD93n9CvzH2E5z5awZamZj7YtJnP3/8XNtY35Ox6xvQ6mU5G7MW1Fmva6mZNzUkef2ERdfVxDp8+hmmTRu7yvSccOJ6Xl6wkngwSChREwpwwbfwer/Hbl+dx+xsLSKRcYpEIjy5ewu3nfhony5MMm5Ip3llfhdc6vZnC/LWVfHL/KVm9ljG9ldDxpLe+xAJJN2qOp/jSd+9h0+YGkq7LPX+fzzWXncapx07t8P1nHj6Vqq113PnMAjzf52OHTeaKM49GVVm+cQvNyRSTRgyhILLjn7ExmeTW1+bjpmshzakUCyrX89a69cyo6HDif8YSrstvX5nHW5XrGT94EN8+9uhgBnyrQKJAUTTSpesY0+f04tpGJiyQdKOnXlrCpi0NJNIZdhNJl9/c+dwuA4mIMOeMmcw5Y+b2fa7nc/mdf+eNjyoJOQ7FsQj3XHE+5YOC0VyLV1TBTs1hjgh18QQvrFjFgsp1DO1XzHkHTSMWzvyfX1X56t8e4Y3K9SRcl3erNvD6mkq+fMRh3LXgbZpdl1goxOiB/Zk1bmznfjHG9HE2astkTUNTHNdr21/RlEh16hx/nf8eb3xUSTwdjJqTKb7/4JP86bLzWLi4ku/9+G/oNIUCAAGFRDLFPxZ/wNPLP6LZdSkIh/nLwveZ+4ULiGa4gNaWpibmr11HMr1mScr32dzUxDFjx3Dg8GHMX1tJef/+fO7ggzI+pzH7jD4eSKyzvRsdftDYNmuNRCIhjjxoTKfO8WHV5u1BBMBXZeWmGgBuueM5EgmXsvc8wvWKeIrjg+cq/3h/Kc2J4Li467KqZhvPf7Qy4+vuepUX5fTJE/nhKSfypcMPbdPMZoxhn1jYygJJN5o0big//faZDBnUj8KCCEcfOo4fXvnxTp1jSvnQNl/WIREmDh8MQENTItiXhJJ1iuO1PVZajQxpdlPUNGc2AgygrLiIwyvKiYWD2kbEcRhcVMih5bseLGCMSbNRWyabjp0xgWNnTOj0ca8uWcUL769gQHEBR00czavLVhNyHAb2K+S62WcAcNKsKTzw8BskEi4agvZjRXYkTVYFrxN/AokIt51zFr9+6VXeWhd0tn/3hFmd6mcxZl9lfSQm7/76ykJ+8dcXiKdcwiGHgcWF3Pv12YRCDmPLBhJJ1xIuOf9oEnGXx599n34I8YhLMj16S9Ggy0SCn7HCUKeboWLhMFefeFyny1+5tZYH5r9LPOly5sFTOHi01WLMPsYCid5aongAACAASURBVMmmmvom7n32bbbWNXH89PEcP73j2kk8keLBf75JZdU2nlj0IXEnBSK4nk9dc4J3P6ri/OOmtzkmFHK4/EsncPmXTgDgjTWVfP9fz1DT1IyEYZvEUQ0CixMSZlaMItcqt9bymZv/TFMyha/K395axG8uOJPjJo/L+bWN6SmsRmKypq4xzvnX/pltDc24ns8Tb3zAlZ8+ltknHdLmfa7r8bUf3M/qdVtJpjxUIFoAyf5Bs5Tn+zQn9zza6/DRFTz1tUuCaycSfPeZJ3hj3TrKiou4/uTTGVlSmvV73Nndr75FYzK5vbM+nnL59VMvWyAx+w6lVy9alQkLJN3o8fkfUN+U2D4EOJ50ufWxee0CyZuL1lK5YRvJVNBbLgrhZkiWKDhC2HE4ev8x3Pr4PB5f8AFFsSjfPmsWR04evctrl8Zi3PqJs3J3c7vQmEi2G/HV3GrUmTF9ndD3ayQ2aqsbJVIu/k55r1qv2d0imXTbrZnuOEJZaTEThg/id189i7kvL+SPz7zB6uptLKncxJW3PcLiNT0vYeInD57api+mMBLm7EP2z2OJjMmDPj5qywJJNzruoPGEWs0jiUXCnHLoxHbvmz6lnHDIoSWWRMIhpk4YztM/m8ND13yBv7y6kAdfXkgitSMIxVMuT729LOf30FkzJ4zm+nPPYGzZQEYOKOFLs2Yw5/gj8l0sY7qVqGa09VbWtNWNxg4fxO+/+RlueOA5ahvjHHfQeL59bvtRUKUlhfzhfy7g+j88xYbqOg6cPJLvzDkFEeGR197nxcXtJxKGHCHaQ1fZO23aRE6b1j5gGrNP6OW1jUxYIOlmB+9Xzn0/uHCP7xtTPohbr53dbv+Syk3bswGHmnwizYo6ECkr4DNHHZj18hpjui4bfSQiMgq4GxhO0H1/m6r+VkQGAQ8CY4FVwHmqWpM+5hrgUsADrlTVJ7tekvasaauXmTiijIJImHCjT0GtEk5ApBkKqz28ZPv+FmNM/mUpRYoL/KeqTgVmAleIyP7A1cCzqjoReDb9nPRrs4EDgDOA34tITpotrEaSR5puE91c18gtj73Kxpp6jp46Bi8qvLx0FSMGlPCN049maGm/7cd85qgDeWHRCt7+90c7Up4oxJtS/PeN/+C3/30eRYXR/NyQMaZjWaiRqGoVUJV+XC8iS4By4CzghPTb7gKeB76b3v+AqiaAlSKyHDgCmNf10rRlgSQPXNfjhpuf5JkXlkBIiFdESHoenq/MW70WPwyeKiFHeOGDlTz2nxfTv6gAVeW1Nz7i2LKRfBirpLEx0eYDuvSjjXz9Bw9w2w0XtkkOaYzJI83+8F8RGQscArwODEsHGVS1SkSGpt9WDrzW6rDK9L6ss0DSTRKJFHfc+wqLl1XR1JxkTeUWXM8nFRPiCRecICakHN0eHDxfaYgn+eJtf2FgcRHRzS4r3qrCTXl4YQiFBM/V7Rm1fF9ZW1XD8lWbmDJheL5u1Rizs8wDSZmILGj1/DZVva31G0SkH/BX4FuqWrfzVIHWb+1SSTrBAkk3UFW+85O/snjp+u2TDHd6B7tajDPhuiyt2gwEbajFUY+CuKIeEBGctgsUAkFAMcb0DJ2ckLhZVWfs8lwiEYIgcq+q/i29e6OIjEjXRkYAm9L7K4HWeZAqgPWdKXumrP2jG2zYVMfiZVUdBpFQXEnnUUSAsC+EdvEXhjrQPDj4JxOg0AkxtmLw9mG/kbDDkMElTBw7tMPjjTH5Ib5mtO32HEHV4w5giare2OqlR4GL048vBh5ptX+2iMREZBwwEZif1RtLsxpJN+koNETCIUIhoX9zhHGHl1PT2MzMKaPxYvDqh2vYXN/IxtqGDk8kAkVFMW6+djb/e+9LLP1oI+PHlPGNS04g0kPnk+RSXUMzv7vnBVas2cyU8cO44sLjKbZBB6YnyN48kmOALwDvicg76X3fA64HHhKRS4E1wGcBVHWRiDwELCYY8XWFquZkaKcFkm4wfGgpk/YbxtIPN5BMeYTDDsPKSvnspw4jFoswbtIQfv/c6yQ8xY3C1089im+dcSzvrq7iS/83d/uKiNFQiKGpEI394qRGRRgwsh//WLyU73zt1HYpVfbkpZWruWXea7i+z0WHHsyn9u943fjeIOV6fPWHD7Bu0zZc1+ejNZv5YMVGbr/u8zhO534vxuRCNlY/VNWX2VUbOJy8i2OuA67r+tV3zwJJNxARfvnf5/J/97zMkg+rGDdqMJd98QRK+hWwtaGJM395F/XxRLBsbvVWNtTW8/PZH2P6mBH875c+zW3PzSfpesyeeRDjhg3igj88QDzlUl+9hRufeIl40uX4ISO5/ZdPULetkVmnTeP8rxyP43TccvnamrVc9vCjxN0gQC3d9AxArw0mH66qpnprPa4b/Neacj1WrdvCuo3bGDViYJ5LZww2s91kR2FBlCu/clK7/S8tXUXS8/DTPebxlMs/3/6Ajc+vZ8jgEo6fNQVZ0kTI9UiNjfPIusVt1mxvTrnc9PjLPPLUNpLxILX8utVbqK9rZs53Ol7G989vvbs9iAA0uy5/XPB2rw0kIu3/O1Wl07U0Y3Klr2f/tUCSZyFH2i+Iq8rK1VtYtWYL899ahYYBEW66/d9MOGk0QtsvTjfpkYintp8n0ZziibkLOOGLR/DTZ56nurGR48eN5arjjyUaChHuoLnH6aYv3cUbN3HF3x9jXV09Ff1L+f3Zn2TK0CFdOufEsUOpGD6AVeu2kkp5RCMhpo4fRvmw/lkqtTFdoLQfWtnHWCDJs+OmjKMoFiHpuri+gq8UbPVRJxil1Vo84bLotTXExoWDfFsC+ErRuhQ7Rxe3KMR5f34wWFQKWFdbR3VjI7/+5Mf54uGH8czyFdtrJQXhMJcf1TYjb01tE7/6v2dYvmoT40eXcdWcUxk0oLhL99qQSHLhA3OpSyQAWLOtli88OJcXv/ZlCiORvT5vOOTw+/+eze0PvcLy1dVM3W8El547s12NRFWpaY4TCTmUxGJdupfOWLdiEzd//y9UV27loKMnMufHn6agqPuub/IvG30kPVm3B5JsJh4TkcOAPwGFwL+Ab6r2vNBfV9fM4sXriMUiHHTQqDap5EsLC5j7zQu5+al5rK+pY+GLK3FF0bB0WB1ONbuohilOhUgkXaL1SiQRCtp3CCYzxgojTDxnCiuS67fHlrjr8vjSD/nVmcr0EcP58+xz+b/5b+J6Hp8/dDrHjRu7/Rqu63HFDx5g/cZtuJ7Phk11XL76fu75zRe7NCJs+ZYt25vwtt+P57Niaw0HDGs/ZPn9DRtZWLWBEaUlnDB+3G6bqooLo3zz4hN3+XpjMsmX5/6dd6qqUIVPTJnEDR8/ndAu+pGypa6mkW9/6kYa6ppRX6leX8PGtVu57r7Lc3pd03PsCwtb5aNG0pJ47C0RKQHeFJGngUsIEo9dLyJXEyQe++5OicdGAs+IyKT0MLZbgTkEaQD+RZCY7PFuv6PdWLNmC1d+4248z0dVGTJ8AKHSKPUNcY49cj++dvHxDCkp5ifnnALAmevvZN36GrTWb/PhU8APQ/MwB9/3OXHKOF59+SNSDsQHhQgdOJDTRpSTak4y6/Rp1I6P8eQzbeceiewY8nHwyBHccvaZHZb5oXnvUrlpG356JUfX89myrZEVazczefywvf5dDCwsJOW3HX2Y9DwGFha2e+8D7y7kf559AQia3Y4dO4Zbzj5zr/s9rn32ed6t2kAqfU9PLVvOgcOHc8mMQ/ZwZNe8+8oy3JSHpucIJBMu77yyjHhTwmol+wpVa9rKtmwlHhORVUCpqs4DEJG7gbPpYYHkhhv+QUNDPPgsCXy0qQaqg9cefeJdGpuSnHXuofzkkWeprm+kqrmeUKx9bUQdqJngQMQh6ghba5og5kD6izE1IMwZc45hxuRgImtdPM6vXnyFlOfj+j6FkTAXHXrIHr+IH3r3Pa5/4SX6+X6b2aqqSiTctb/exwwcwGcPnMZf31+M53uEnBAXTD+QkaUlbd6X8jx+8sxz27/0AV5etZr5a9dx5OiKvbr2m+vWk/R2BLFm1+WNysqcB5JItOP/xBzLhbZPsRpJDnUx8Vgq/Xjn/T3Kxg212/8Y8cMtHRnBl3ki6fLUvCX8ddtyGhPBiCsEvCKhqUwo2qyoBB/C+nIHHCedJiXK2vXb2nzRJlMeL767YnsgKS0o4LFLLuSWea+zob6BEyeM49wDD9hjeX/7yjyaIh6xfhBpAMeHUNhh6n7DGVtR1uXfx49POZETJ4xnxdat7Dd4MLPGjWn3nsZkqt0wLBFhc1PjXl939ID+rK7Ztr1pLRoKMW5g7ocGHzJrMgOHlpJatxU36RErjHLKuYcTje19n5DphSyQ5EYWEo9lnJBMROYQNIExevTozhe2C6ZMHcn81z8igeIVhIJMoK1eT/WTtrmx0i82l4VI9lecFHjRliAEJQUxHv7Ghcz5+V/YVt+8/bBwyKF/cUGba2+s3Maqx1ZTU9vEsukO8UmTKCzY/WzvpOeDCDWTHYqrlEijcuiUcn71zXOyMrlPRDh+/FiOHz92l+/pXxBjeEkJ6+rqtn/x+77P9BF7n4jyJ6eexDn3PEDCdVGUESUlfG1m7pf8jRVG+d0/r+LBm55iw9otTD9mEh+/8JicX9f0LFYjyYEsJR6rTD/eeX876eyZtwHMmDGjW/9Jv/XtM/jcD+5imyTAU0qq/GCOAxCLhpl51CSe/GA5A1a6OC6kioXGUQ4+ghcR/MiO6BgLO3zmsAMYWtqP78w+gf/6wz+CmfIhh9LiAs45/qDt163aWMu3fvgQ8fTckudeXkpDY4L/94PP7La85x54AH9+6x2aXZfGcqEgHObbF55ENNJ9HxUR4e7zz+HLf/07K7ZspbQgxo1nfpyK/ns/nLeif3+e+colLKhcRyQU4vCKcmLh7rmn4tJCvvT9s7rlWqYHUsDr25EkH6O29pR47HraJx67T0RuJOhsnwjMV1VPROpFZCZB09hFwE3ddBsZu/ult6kp9FBXICzUl0PxBp8oDp8790hOnDWZFx9dFIxHA5w6RVZ61I8Jt0nRI8CsyeP51seOBeCYA8dx+3+dx8sLV1JUEOXMo/dvUyN54+1VtB7Alkx5zFuwAt/X3dYsrjruGAojYR5bspSSaJSrTzyOqV2c57E3Rg3oz5OXXozn+1kbWVUSi3HihPFZOZcxnWE1kuzLZuKxy9gx/PdxekhHu6ry/EtLWVu5lb8vfJ+Eu6OTVyMOiQFQ2BjiE6ccyIJ3VlEQjhD3gpqDKEQbAdU2HeMlBTF+feEn2nypTh0zjKljOh5FVRALt+tYD4cd9jToKeQ4XHnMUVx5zFGdvOvcyPXwXGO6hY3ayq5sJh5T1QXAtOyVrutUlet+8U9envchiUSK+rERaN2vqhAWh/+6/DSGlpVQEIu0/3Lf6XksHOL3XzyrU1+qs46ayJ33v0L15gZSrkcsFuaLs4/uM2lDlq+uZsPmOiaMKmPEUJvBbno2q5GYTllTuZWXXl1GIpGeNb7JpXFECBwh5AiF0Qj3XH0+40cGI6COOWICQ8pKWLu+BvWDUVqNQwV1ggRSsXCIey8/n6nlnZu/UVgQ5Y7fXMxfH3uL6q0NHHHIWGbNnJj1+82HW+59kblPvE045OB6Pj+4/AxOPmpyvotlTMeyl0a+x7JAkmUNDXHCIYdE+nm0UYlU+ThlMYqiEa4+9xTGDB9EczJFYTRCLBbhf2/8Alf95mHeWLqWVD8h2T+97q4Hl886otNBpEVxUYyLzu8ZTVTZsmzVJuY+8TaJpLv9d/w/v3+CWTMmdOuAAGMyJYBYZ7vpjHFjhxAKhxABX4PZ6CQVXdtMndPMNdc9jF8gJAaHGFsxiIJolOXrN5MsUBLlrdKPCBBSfv3iPB5Y+D53fOkcxpblZt7DB5Wb+O7d/2JDTT0Thg/mF5d8gvLBPbO5qKq6tk2gblFb38yQQSUdHmNMvkkf7yOxnswsKyqM8rsbLqCiYhBeoYNGBA2DHxM0FGT6deJKrMpledVW3l+9gXjKDZbhbf1ZC/Kgg0BVbT1funNuTtZir2uK8+Vb5rJqUw3xlMuSyk1cevNcXK9nZpmbMGpIu7IVRMMM7N+1hJLG5Ix2YuulLJDkwNgxZZxy2jTCYScdDNJb+rctLf/n+RRs8ei3zqWoytuRk0dbzbdUxUkqNVubWLOpBtfN7kqZSyo3tRkm7KuyrbGJDTV1Wb1OtlQMH8DVc04jGgkRi4bp36+AG793DmFLOWJ6LG373/butl7KmrZypLEpsdu/6sWHomqfcDwIGQW1SjjuUT86hIYEDQcp5ft/pIRSQYfJF752B/hw2glT+eF/dJxwsbNKC2N4fttyup5Pv8Kem1Dw9FlTOeHIidTWNzNoQLEFEdPj9fVRW/ZfYI4ce8R+xFon7FPdXnVVCfpOWoIIpLtEkhCrVUJJEFcorgyCiKT/B4ADTz+/hL//6+2slHNKxVBmTh5DYTQYhlwYjXDBcQczoLh9Rt6eJBYNM3RwiQUR0ztYjcR0lu8rB00p50ff+gS/vePfbN7agPignjJyRH/q1aW6qZHwTj3GAuAEHXOReiXa4COtY73I9g/bS68v5+yPdz1zrYhw4xc/yRNvL2Xt5m1MLh/CCdMmtHmPqqJ03yqKxvQpaqO2TCfU18f575/+jXcXriUaDXP4zP3YsrkhmB/iK+IqNZsaKRxYQCThoI4P/o7FDf0QqO8z5JU6QqngtURZId6AdOqTVn+xDBmcvRFKjiN8/LApHb5279vvcv3zL5JwPWaOHsUtZ5/ZrasLGtMn9O04Yk1b2fSz6x/lvfcr8X0lHk/xwnOL0VS6Ez296mE8kWJwSRGxaBgNCxoCP/2HvheDQe/WEUr4SDrAxLY0I82pHUHEh1gszDe+vOvVALNl3uq1/L/nXqQ55eKrsqByHVf984mcX9eYvkZUM9p6K6uRdFEyniKSzmu1cOFaXNdH40mia7ciro9GHJLlg6AgglsUjDQ6/YT9eWvZOl6ZvxwVASfoPwk3Qyjut8sfIykPtyjE6NFljB81mGu+ejrF3bC63mtr1pJIr+sOwWqGr6+p3M0RxpgO9eIgkQmrkeylzVXbuPzU6/n0pKs4e+JVPDN3PiWlhfgpj9jqLThuEBCclE9s7RbUVcLNPlMmDWdk+UDmvb+SxsGQ6Bd0vivQNMxBw+37IfxYiFS/EGvCTTxXtYbL/vdhGuLJnN5fPOUyqLCwXar1AYUFuzjCGNMhBfwMt17KAsle+smXbmP1sip8X0nGU9x8zYMcffAYQun1P9pQcNwUBdEwF33+GH59/3NUlwe1kFAyGAocH+DgxYSaaSWoEyytqwKpkihecYRwHBqSSepxeadqA8f/5A+89uGarN9XbVOcC295gCO+fzO//suL9HcjFEUiFITDFIbD/L8zTs36NY3py4TMmrWsaWsf4/s+H71f2aa26qY8/v3s4uBJepXB7TwfL+LQEIWrrp2L6ylFJeAWCeIGnSHRWh8ch+SACFsOHUDhBhdCglcYBhH8EPhRto8XTrgeV971KM//6KsURbO3bOv3H3iCRWs34qviq5LYluILx0+nfGh/jhozmnGDcr88rTF9jt+LqxsZsECyFxzHYcdYq4CX8nCTLuJ64LpoqyYhTbnbm6w8T4MJiHWKF1eayxwizUH/SKRBiTQGtRO3NLp9WV5F8QqEdvnlFapq6pgwbHDW7u2tVevbrAUfT7mEXOFzh0zP2jWM2ae0NG31Yda0tRc8z0PjcdyoQ3xIAcnSCKBUDCslpIqmXDxckiUOvrrgukirv0gU8KICOBRuDYKIABoCFSVapyT6aTD23FdEwe2g0tGcTDGoX1FW762spG3OqlgkzPABlgzRmK7o601bFkg6KZF0+Y/vP0R8SCGbT61g2+FD2XLcSOoOG8LnP3s4Y8YNpXG/UtZfuB8bPzmKdRfuR9O4fmirRam8CIgffHDig6GhAhpGQKjJJ1brE9vm06/aJ+Qq4ZQSSiqFdT6S0jYJ3iIq1DXGs3p/1553GkXRyPZt/JCBnHNEj1o7zJjeJ0sz20XkThHZJCLvt9o3SESeFpEP0z8HtnrtGhFZLiJLReT0HN2dNW111p/ufYXFS6uoPWIEeIrGQiBCfFQpoUllnPKZ6bzybgoN7wgcW0+uYMAyF6flg6IQSkHdaCHVT8AJZqzXTgozaLGLpONF6/Qp4WYIJRX1grknKITCDgVZXoNj+pgRPPKdi3lzRSXFsSjHTh5LJBza84HGmF3IavqTPwE3A3e32nc18KyqXi8iV6eff1dE9gdmAwcAI4FnRGRSq6XKs8YCSSct/mAd+t5ahtQ1AkJySCE1s0bhi/DKWyt44omFMGqnvgxH8AscnHTlIeSC70CqRHZ0yougISVVIkTrOv7QCekUKSqEHYfjp41n2MCuNTt5ns/mLQ30K45RXBzMTRkxoIQzD53apfMaY9IUyFKKFFV9UUTG7rT7LOCE9OO7gOeB76b3P6CqCWCliCwHjgDmZaUwrVgg6aTU8o2E6poQH0CJVjdT8t4mGg4cyvNPvo/X6KLS9teqAk562oem/6+jtFUtr7Gj4rK9S9+LBU+cpBJR4WNHT+aHl5zW6fJv3NbAjX9/gcrNtUwdOZR3n1hGXW0znufzhQuO5uLPH9Ppcxpjdi/H/R/DVLUKQFWrRGRoen858Fqr91Wm92WdBZJOeOS2f7PixQ/afCjEVyKbmum/ZAte/0GE4h6DXt1CzVFDAUEdKK708CIQLwqiRyilxOohWqckS9jetOV4wcgtFXDD4BVAOAFuDJKlDiFfGFgvHDS5nB9efBohp3NdXA3NCT73y3upaWjG85VFqzcSDvn0S68vf/9fXufAAyo49OAx2fqVGWOgM01bZSKyoNXz21T1tr28akdZVnMS0SyQZGj5wjXc8dO/7hgPnq5SKBBuSBJavIXmQ0pwmhJEt/g47yVJlYQJN6aoHR/DjwSrHYablHiZEPJ8+lX6NJcJiVIH34FIvdJUFiJZ4hN2Hfww1JcIooIoXP+J0xk6sB/TDxiF47T9jFRtrOWe+19l27YmTpg1hdNOPqDdPcz/cC3NiRReeqVFFUj1E1SC9RJc12PZ8g0WSIzJJiVYdzszm1V1RievsFFERqRrIyOATen9lcCoVu+rANZ38twZsUCSoQ/eWEEq5W9vb1IIahIhh9TEcjzPI/b2agiHcCePRPxgfkj9yEgQRNJf/G5hcGxtRQhxg3OFE0JIFI04uGElHHeIxBXxIFaj1I9xUBHGTBzClBFD2pVt85Z65nz9LhobE/iqvPXOGrZsbeCCzx7Z5n3Bmia7TgUfDocYMXxAtn5lxhggy53tHXkUuBi4Pv3zkVb77xORGwk62ycC83NRAAskGVo4fwV+LAwoknRJTRgOYQctLoCQg++H8Af1w4mnUAUnpajn4RVGtgcRABwJ5oeEBU2vHeWJ4sSDpXjVEdwBkNTgmEiDUrTep2mkw+jB/Tss279f+IB4PIWf/rDGEynue+j1doHkyMmjKCmKkXBdXM8nGg4RqvXol14l8YjDxjHr6ElZ/90Zs8/LUiARkfsJOtbLRKQS+DFBAHlIRC4F1gCfDS6pi0TkIWAx4AJX5GLEFlggycjiJet4bvVm3IkjQQSncgs6sLhNj7k6QmK/IYRXVkPICfo8fCHUrPiRVr3rnuL4iheW7ZUDPybgQchrSYOy47VUP4g2KgclB1AUjXZYPs/ztweRFn4HKRmKYlHuu+pz3PyPV6jcXMvhk0bx6Rn7s2LFJkpLC5kyaQRii1cZk11KkDYpG6dSvWAXL528i/dfB1yXlYvvhgWSPVBVrv7BXFxfgwAB+BWDcKrrAMUvKoCCYJlajYRIVQwkVt0AoRB+SSGlq1JsmxzFjwR9ErFaj8TAUNsWJgGNgO7is+aHhao122hoTNCvuH36+FnHTOLu+16lOf1hjcXCfPz0gzo81+CSIn58QdvEi9lcJMsYszPd9X/cfYQFkj1oaEjQ0NB29rg6gtQ1EqppDHYIeEMHIAOKCVfXIs0pRMEvjODtN4xBi5L4MUF8xXFhU/9Q2xmHCuKxfY5IyzlbhJLBuu071zpaVIwcyO9+8Tluvf05auuaOX7WZD5/3sys/h6MMV3Qi9OfZMICyR6II20+A0rwXR+qaw6eRx22HT4Ed0CMkB+mYPAInJRHdGkVtUeOwCsIU7glRaRZSZQ4pIodQgkfP+bsCBoKkmpp1mo1iQQoqFGKNczBB1ZQ2m/Xa4FM3G8YN14/O/u/AGNM13Ru1FavZIFkDyKREH5UkKTih4Cw7GjzdIQN54zHLYlA2AHPJ1UPpWuExEGjCKUEP6rUjo+irX/TChJPJ3IDxBP8MEEtpKWPQpXCJuHAwWUcPLWCr154XHffOgC1tU3885/v0FCfYOZR+3HQQaP2fJAxpi2rkezbwo4Q3lRLqqwUQumUJiJoJERyaAFecTgIIgAhh2SpoiHB8SAaV5qGhYIU8jv1iQhKZFu6ZuJokD6zdUe3CKlC4c5fXNSdt9tGXV0zX/nyHdTWNv3/9u4mNI46jOP495mZ3e3mZTdtEpvWNh5MW1uLXqI2IkJRoSKCHi1UQaVeCtZD9aIFKRRvKuJbEZGeBA8WwWJFUQQVMXpQRO2rfbMvaZM0L5t9mZnHw9SkCWm77STZnfT5wB6ymZ35TbLwzH9enj++H7JnTy/bXnyE9evX1CyTMYk0zwuJdf+9isJIEe/AGVIn+icNT8urlxL+Pzq5gksno7qU+CHpCwG54z75o/608xUEqry68S0+fedLghm66+Na7Nv3O0NDY/h+tO1Syee9d7+e8xzGJJoqBEF1r4RK/IhERDYAbwIu8IGqvjYT6y0Vy+zYupvvf/gbWZjFb3Dx04obhEggBPkGwqY0DWeVIBNS6Bc8yAAABGtJREFUWhS1Q0kVogcJx/OF09QaVXCEVOAgorijARK66JSKI6UKP37+O79+8wcHfzvGtveenYldq1qhUML3J3+5i9NNJWyMuTIbkdQvEXGBt4GHgTXAExdbJ8cyViiy4aGdfHfgNO6hU5S9Cv3rFjG83GWgK0WhXQhF0axHquSQGVKaj4Y0HiuRPxQg4cUnWUOl+XA5GslcMueAU4HmkyFOSHS9JITUaDj5y6ZKqi+6oF8qlPn2k58oDI/F3bVrsm5dF+n0xLFGJuNx332r5jSDMfPCDM1HUq8SXUiIWiIfVNXDqloGPiZqnRzLC0++S5DL4v11Ai1WuPBwF6RcNOOBKxQXOmjGGX+uRBAcH3JHyiw4NoSUApxigFsIyAyHtOwvI4HilCB3yKflcAWveLGojEWnjZp7zyD+xBdKfCX/69nxTCLRdL5zadWqJbyy/TGWLGkhn8/ywIO38/zWWZsbx5h5KjqorOqVUEk/tXUzcPySn08A90xdSEQ2A5sBOjs7r7rSvv4RaEgjo0XIuKg75ZTTdB8SRR0otaXRjINbCFAH/KwwsiyFW4b8XwXwA1InB3ByWfyW5vG28ZnBMjd9dpjRlS0o0LR/kNRACYBUxmP1XbfSvKipqj/KTOrpWUFPz4o5364x84aC2gOJda2qNskX2zDvAuju7r5q2b/zjk6+OnCasKUR52QRp+gTNk60J1ERZHAUzWXH26GgUGnyEM+LDkDGRpGWJtIjPosPQjhYhL4BnKExBEiPVXBubmd4OHrYMehYROrAv7T+0oeI4KU9unq6uNA3zNp7V/LcTntGxJjEqsHNMnMp6YVkVtokb3/jKX5bv4Ozty3DGSmycM/f9D9+G5p2wRFyP52m4c9+SmuXErQ2AkL60Dm8QgX1hJuWtfLy7i2sXtHBQP8oY4UyZ4+cYcemdwiyaUB58f1naF+xhJe2fUyp7BOmXJ5+fRMyOAqq3P/43SzubI27K8aYWlOdmH5inhJN8AUeEfGA/UQNy04CPwMbVfWPy32mu7tbe3t7L/frSU4fP88/B0+hlQqpbJojYYWeNctpa2hiwTQ9r66mXKrQf+YCC9tzZLLRCMf3A86fGyGXz5LNTt+U0RhTGyLyy3XMDzJJ3m3TnsZHq1p23/BHsbdXC4kekaiqLyJbgH1Et/9+eKUicq06lrfSsXxiVBD3v5vOpOjobJv0nue5LO6Yvj28MWZ+0Hk+Ikl0IQFQ1b3A3lrnMMaY6SX71t5qJL6QGGNMXbOmjcYYY+JQQBPc/qQaVkiMMWY2qU1sZYwxJiad56e2En377/UQkT7gaJWLtwHnZjFOUjKA5ZjKctRXBpidHLeoanucFYjIF0TZqnFOVTfE2V4t3HCF5FqISG+t7+muhwyWw3LUe4Z6ynEjSnrTRmOMMTVmhcQYY0wsVkiubFetA1AfGcByTGU5JtRDBqifHDccu0ZijDEmFhuRGGOMicUKiTHGmFiskBhjjInFCokxxphYrJAYY4yJ5T8ZYuuudXBzEQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.plot.scatter(x='height', y='weight', c='exp', colormap='viridis')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "celltoolbar": "Create Assignment",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
