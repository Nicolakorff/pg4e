{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "SQL Magic Connection to the Read Only Database\n",
    "-----------------------------------------------------------\n",
    "\n",
    "In this assignment we make sure that you can properly make a connection to the read only database provided in class.  You should be given the database name, server, port, user name, and password separately in the course.  You can put them into the __hidden.py__ file but in order to pass the autograder you will also need to set the __sql_string__ variable since the auto grader won't have access to your __hidden.py__ file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# https://www.pg4e.com/code/ipynb/02-readonly-magic.ipynb\n",
    "\n",
    "# https://github.com/catherinedevlin/ipython-sql/blob/master/README.rst\n",
    "# Adapted from: https://towardsdatascience.com/jupyter-magics-with-sql-921370099589\n",
    "    \n",
    "import pandas as pd\n",
    "\n",
    "%load_ext sql\n",
    "%config SqlMagic.autocommit=False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "magic_string = None\n",
    "# magic_string = 'postgresql://readonly:secret_xyzzy@pg.pg4e.com:4352/readonly'\n",
    "    \n",
    "# If we leave magic_string as None, we can use hidden.py - but this only works for demo/test - not autograder\n",
    "if magic_string is None:\n",
    "    raise Exception('You need to define your magic_string')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Make the connection\n",
    "%sql $magic_string"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# A Basic query returning a result set that is displayed\n",
    "\n",
    "%sql SELECT * FROM taxdata LIMIT 15"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-85266d53d5d145f8",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "celltoolbar": "Create Assignment",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
