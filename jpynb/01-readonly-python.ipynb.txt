{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Setting Up a ReadOnly Database Connection in Pandas\n",
    "-----------------------------------------------------------------\n",
    "\n",
    "This assignment will make sure that you have the database setup by testing to see if \n",
    "we can make a database connection to the shared database for the class.  It also will test\n",
    "if your database connection information (sql_string) is set properly for the autograder."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# https://www.pg4e.com/code/ipynb/01-readonly-python.ipynb\n",
    "\n",
    "import psycopg2\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sql_string = None\n",
    "# sql_string = 'dbname=readonly user=readonly password=secret_xyzzy host=pg.pg4e.com port=5432'\n",
    "    \n",
    "if sql_string is None:\n",
    "    raise Exception('You need to define your sql_string')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "conn = psycopg2.connect(sql_string,connect_timeout=3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sql = \"SELECT count(*) AS count FROM taxdata;\"\n",
    "df = pd.read_sql_query(sql, conn)\n",
    "assert df['count'][0] == 378304"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-ad191fd62ca88a09",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "my_sql = 'select * from taxdata where ein = 742661023 limit 1;'\n",
    "my_df = pd.read_sql_query(my_sql, conn)\n",
    "assert my_df['expenses'][0] == 0\n",
    "assert my_df['revenue'][0] == 0\n",
    "\n",
    "### BEGIN HIDDEN TESTS\n",
    "my_sql = 'select * from taxdata where ein = 270243010 limit 1;'\n",
    "my_df = pd.read_sql_query(my_sql, conn)\n",
    "assert my_df['expenses'][0] == 147332\n",
    "assert my_df['revenue'][0] == 153662\n",
    "### END HIDDEN TESTS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "celltoolbar": "Create Assignment",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
