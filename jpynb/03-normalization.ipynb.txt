{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Reading Normalized Data Quickly using a Database\n",
    "------------------------------------------------------------\n",
    "\n",
    "In your readonly database, there is an un-normalized table called *home_value_by_zip* with 4,466,776 records of un-normalized data.  There is also a normalized copy of the same data in a few tables in the database.  This goal of this assignment is to use JOIN and GROUP BY to query the normalized data, resulting in faster and more efficient queries.\n",
    "\n",
    "You must examine the tables using psql and figure out how to connect them and then construct an efficient SQL query in this notebook that will retrieve the requested data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# https://www.pg4e.com/code/ipynb/03-normalization.ipynb\n",
    "\n",
    "import psycopg2\n",
    "import pandas as pd\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Update this SQL connection string with correct readonly database credentials\n",
    "sql_string = 'dbname=readonly user=readonly password=PLEASE_UPDATE_ME host=pg.pg4e.com port=5432'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# open a new connection\n",
    "# NOTE: this will raise an OperationalError if the readonly database credentials are not updated in the previous cell\n",
    "conn = psycopg2.connect(sql_string,connect_timeout=3)\n",
    "print(f\"connection created: {conn}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You are to construct a query using the normalized tables that will return the same results as:\n",
    "\n",
    "    SELECT state, avg(ym_val) AS average FROM home_value_by_zip\n",
    "    GROUP BY state ORDER BY average DESC LIMIT 10;\n",
    "\n",
    "This query may run quite long - and might not finish - you should construct a more efficient query using JOIN starting with the `home_value` table.\n",
    "\n",
    "Here is the expected output of the first few rows of the query:\n",
    "\n",
    "     state |       average       \n",
    "    -------+---------------------\n",
    "     CA    | 429388.882710557533\n",
    "     HI    | 384304.615036999379\n",
    "     DC    | 373415.607524148449\n",
    "     NJ    | 313458.077439427195\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-715a65927576adb6",
     "locked": false,
     "schema_version": 3,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "state_avg_sql = None\n",
    "\n",
    "### DEFINE YOUR SQL QUERY HERE (NOTE: this query will fail as-is)\n",
    "state_avg_sql = '''\n",
    "SELECT\n",
    "    state,\n",
    "    avg(ym_val) AS average\n",
    "FROM home_value \n",
    "-- add JOIN and GROUP BY logic here...\n",
    "ORDER BY average\n",
    "DESC LIMIT 10;\n",
    "'''\n",
    "### END SOLUTION\n",
    "\n",
    "if state_avg_sql is None:\n",
    "    raise Exception('Please define the sql query above')\n",
    "\n",
    "start_time = time.time()\n",
    "state_avg_df = pd.read_sql_query(state_avg_sql, conn)\n",
    "print(f\"state average execution time: {round(time.time()-start_time, 2)}s\")\n",
    "state_avg_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "### BEGIN HIDDEN TESTS\n",
    "assert state_avg_df['state'][1] == 'HI'\n",
    "assert state_avg_df['average'][1] > 384304\n",
    "assert state_avg_df['average'][1] < 384305\n",
    "assert state_avg_df['state'][3] == 'NJ'\n",
    "assert state_avg_df['average'][3] > 313458\n",
    "assert state_avg_df['average'][3] < 313459\n",
    "\n",
    "if state_avg_sql.lower().find('join') < 0 :\n",
    "    raise Exception('You need to have a JOIN in your query')\n",
    "### END HIDDEN TESTS"
   ],
   "metadata": {
    "editable": false,
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-e94015b31a39e6d0",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false
    },
    "jupyter": {
     "outputs_hidden": true,
     "source_hidden": true
    }
   }
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You are to construct a query using the normalized tables that will return the same results as:\n",
    "\n",
    "    SELECT city, avg(ym_val) AS average FROM home_value_by_zip\n",
    "    GROUP BY city ORDER BY average DESC LIMIT 10;\n",
    "\n",
    "This query may run quite long - and might not finish - you should construct a more efficient query using JOIN starting with the `home_value` table.\n",
    "\n",
    "Here is the expected output of the first few rows of the query:\n",
    "\n",
    "           city       |       average        \n",
    "     -----------------+----------------------\n",
    "      Atherton        | 3625292.526690391459\n",
    "      Portola Valley  | 2218466.548042704626\n",
    "      Fisher Island   | 2078791.814946619217\n",
    "      Montecito       | 1939405.693950177936\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-fb2f81aa54d0b8cd",
     "locked": false,
     "schema_version": 3,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "city_avg_sql = None\n",
    "\n",
    "### DEFINE YOUR SQL QUERY HERE (NOTE: this query will fail as-is)\n",
    "city_avg_sql = '''\n",
    "SELECT\n",
    "    city,\n",
    "    avg(ym_val) AS average\n",
    "FROM home_value \n",
    "-- add JOIN and GROUP BY logic here...\n",
    "ORDER BY average\n",
    "DESC LIMIT 10;\n",
    "'''\n",
    "### END SOLUTION\n",
    "\n",
    "if city_avg_sql is None:\n",
    "    raise Exception('Please define the sql query above')\n",
    "\n",
    "start_time = time.time()\n",
    "city_avg_df = pd.read_sql_query(city_avg_sql, conn)\n",
    "print(f\"state average execution time: {round(time.time()-start_time, 2)}s\")\n",
    "city_avg_df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "editable": false,
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-dbf5ff3e57889dc7",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false
    },
    "jupyter": {
     "outputs_hidden": true,
     "source_hidden": true
    }
   },
   "outputs": [],
   "source": [
    "### BEGIN HIDDEN TESTS\n",
    "assert city_avg_df['city'][1] == 'Portola Valley'\n",
    "assert city_avg_df['average'][1] > 2218466\n",
    "assert city_avg_df['average'][1] < 2218467\n",
    "assert city_avg_df['city'][3] == 'Montecito'\n",
    "assert city_avg_df['average'][3] > 1939405\n",
    "assert city_avg_df['average'][3] < 1939406\n",
    "\n",
    "if city_avg_sql.lower().find('join') < 0 :\n",
    "    raise Exception('You need to have a JOIN in your query')\n",
    "### END HIDDEN TESTS"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Create Assignment",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
